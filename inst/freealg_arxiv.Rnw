% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-


\documentclass{article}

\usepackage{arxiv}

\usepackage[utf8]{inputenc} % allow utf-8 input
\usepackage[T1]{fontenc}    % use 8-bit T1 fonts
\usepackage{hyperref}       % hyperlinks
\usepackage{url}            % simple URL typesetting
\usepackage{booktabs}       % professional-quality tables
\usepackage{amsfonts}       % blackboard math symbols
\usepackage{amssymb}        % needed for \leqslant
\usepackage{amsmath}        % needed for cases
\usepackage{nicefrac}       % compact symbols for 1/2, etc.
\usepackage{microtype}      % microtypography
\usepackage{lipsum}		% Can be removed after putting your text content
\usepackage{graphicx}
\usepackage[numbers]{natbib}
\usepackage{doi}
\usepackage{wrapfig}


\title{The free algebra in R}

%\date{September 9, 1985}	% Here you can change the date presented in the paper title
%\date{} 					% Or removing it

\author{ \href{https://orcid.org/0000-0001-5982-0415}{\includegraphics[width=0.03\textwidth]{orcid.pdf}\hspace{1mm}Robin K. S.~Hankin}\thanks{\href{https://academics.aut.ac.nz/robin.hankin}{work};  
\href{https://www.youtube.com/watch?v=JzCX3FqDIOc&list=PL9_n3Tqzq9iWtgD8POJFdnVUCZ_zw6OiB&ab_channel=TrinTragulaGeneralRelativity}{play}} \\
 Auckland University of Technology\\
	\texttt{hankin.robin@gmail.com} \\
}

% Uncomment to remove the date
%\date{}

% Uncomment to override  the `A preprint' in the header
%\renewcommand{\headeright}{Technical Report}
%\renewcommand{\undertitle}{Technical Report}
\renewcommand{\shorttitle}{The free algebra in R}

%%% Add PDF metadata to help others organize their library
%%% Once the PDF is generated, you can check the metadata with
%%% $ pdfinfo template.pdf
\hypersetup{
pdftitle={The free algebra in R},
pdfsubject={q-bio.NC, q-bio.QM},
pdfauthor={Robin K. S.~Hankin},
pdfkeywords={Free algebra}
}

\begin{document}
\maketitle

\begin{abstract}
  The free algebra is an interesting and useful algebraic object.
  Here I introduce {\tt freealg}, an R package which furnishes
  computational support for free algebras.  The package uses the
  standard template library's {\tt map} class for efficiency, which
  uses the fact that the order of the terms is algebraically
  immaterial.  The package follows {\tt disordR} discipline.
  I demonstrate some properties of free algebra using the package, and
  showcase package idiom.  The package is available on CRAN
  at \url{https://CRAN.R-project.org/package=freealg}.
\end{abstract}

\SweaveOpts{}

\section{The free algebra}

\setlength{\intextsep}{0pt}
\begin{wrapfigure}{r}{0.2\textwidth}
  \begin{center}
\includegraphics[width=1in]{freealg.png}
  \end{center}
\end{wrapfigure}
The free algebra is the free R-module with a basis consisting of all
words over an alphabet of symbols with multiplication of words defined
as concatenation.  Such objects are a natural set to consider and have
a sum and product given by algebraic addition and string concatenation
respectively; the system is assumed to be distributive.  Formally, we
consider the free R-module with a basis consisting of all words over
an alphabet of symbols [conventionally lower-case letters] with
multiplication of words defined as concatenation.  The system inherits
associativity from associativity of concatenation; distributivity
follows from the definition of R-module.  However, the free algebra is
not commutative in general.  Thus, with an alphabet of $\{x,y,z\}$ and
$\alpha,\beta,\gamma,\delta\in\mathbb{R}$, we might define free
algebra elements $A,B$ as

\[
A=\alpha x^2yx + \beta zy\qquad B=\gamma z + \delta y^4
\]

we would then have

\begin{eqnarray*}
AB &=& \left(\alpha x^2yx+\beta zy\right)\left(\gamma z+\delta y^4\right)=\alpha\gamma x^2yxz+\alpha\delta x^2yxy^4+\beta\gamma zyz+\beta\delta zy^5\\
BA &=&\left(\gamma z+\delta y^4\right)\left(\alpha x^2yx+\beta zy\right)=\alpha\gamma zx^2yx + \alpha\delta y^4 x^2yx + \beta\gamma z^2y + \beta\delta y^4zy.
\end{eqnarray*}


The above examples are a little too general for the {\tt freealg}
package; the idiom requires that we have specific numerical values for
the coefficients $\alpha,\beta,\gamma,\delta$.  Here we will use
$1,2,-2,3$ respectively.

<<defineAandB>>=
library("freealg")
(A <- as.freealg("xxyx + 2zy"))
(B <- as.freealg("-2z + 3yyyy"))
@

Note that the terms are stored in an implementation-specific order.
For example, {\tt A} might appear as {\tt xxyz + 2*zy} or the
algebraically equivalent form {\tt 2*zy + xxyz} (see the {\tt disordR}
package~\cite{hankin2022_mvp_arxiv,hankin2022_disordR}).

\section{Computational implementation of free algebra: the {\tt STL}
map class}

A ``map'' is a sorted associative container that stores key-value
pairs with unique keys~\citep{musser2009}.  It is interesting here
because search and insertion operations have logarithmic complexity.
Free algebra objects are considered to be the sum of a finite number
of {\em words}, each multiplied by a coefficient.  A word is something
like $x^2yx$, represented internally as a list of signed integers:
usually, one identifies {\tt a} with 1, {\tt b} with 2, and so on, so
$x$ would be 24 and $x^2yz$ would be {\tt [24 24 25 24]}.  It is
understood that powers are nonzero.  An {\tt mvp} object is a map from
terms to their coefficients; thus $B= -2z + 3y^4$ might be

\begin{verbatim}
{[25,25,25,25]} -> 7, [26,25]} -> -2}
\end{verbatim}

We understand that coefficients are nonzero.  In {\tt C++} the
declarations would be

\begin{verbatim}
using namespace std;
using namespace Rcpp; 
typedef std::list<signed int> word; // a 'word' object is a list of signed ints
typedef map <word, double> freealg; // a 'freealg' maps word objects to reals
\end{verbatim}

Thus a {\tt word} is a list of signed {\tt int}s, and a {\tt freealg}
maps {\tt word} objects to doubles.  One reason why the {\tt map}
class is fast is that the order in which the keys are stored is
undefined: the compiler may store them in the order which it regards
as most propitious.  This is not an issue for the maps considered here
as addition and multiplication are commutative and associative.  The
package uses {\tt disordR} discipline~\cite{hankin2022_disordR}.  Note
also that constant terms are handled with no difficulty (constants are
simply maps from the empty map to its value), as is the zero
polynomial (which is simply an empty map).


\section{The package in use}

Free algebra objects have naturally defined addition and
multiplication, implemented by the package.  With $A,B$ as defined
above:

<<useAandB>>=
A+B
A*B
B*A
@ 

Note again that the terms are stored in an implementation-specific
order.  Inverses are coded using upper-case letters:

<<useuppercase>>=
A*as.freealg("X") # X = x^{-1}
@ 

See how multiplying by $X=x^{-1}$ on the right cancels one of the {\tt
  x} terms in {\tt A}.  Also note the transparent implementation of
(right) distributivity.  We can use this device in more complicated
examples:

<<uppercaseC>>=
(C <- as.freealg("3 + 5X - 2Xyx"))
A*C
C*A
@

With these objects we may verify that the distributive and associative
laws hold:

<<checklaws>>=
c(A*(B+C) == A*B + A*C  ,  (A+B)*C == A*C + B*C  ,  A*(B*C) == (A*B)*C)
@ 

\subsection{The commutator bracket and the Jacobi identity}

Various utilities are included in the package.  For example, the
commutator bracket is represented by reasonably concise idiom:

<<usecommutator>>=
a <- as.freealg("a")
b <- as.freealg("b")
.[a,b] # returns ab-ba
@ 

Using {\tt rfalg()} to generate random free algebra objects, we may
verify the Jacobi identity:

<<verifyjacobi>>=
x <- rfalg()
y <- rfalg()
z <- rfalg()

.[x,.[y,z]] + .[y,.[z,x]] + .[z,.[x,y]]
@ 

\subsection{Substitution}

One of the advantages of working with the map class is that
substitution has a natural ready idiom:

<<showsubstitution>>=
subs("aabccc",b="1+3x")  # aa(1+3x)ccc
@ 

<<sequentialsubstitution>>=
subs("abccc",b="1+3x",x="1+d+2e")
@ 

\subsection{Calculus}

There is even some experimental functionality for calculus:

<<showderiv>>=

deriv(as.freealg("aaaxaa"),"a")
@ 

Above, {\tt da} means the differential of {\tt a}.  Note how it may
appear at any position in the product, not just the end (cf matrix
differentiation).

\section{Numerical verification: an example from matrix algebra}

With $A,B$ as above, we can verify that matrices, which obey all the
relations of free algebra, are consistent with the package:


<<tryAB>>=
A
B
A*B
@

Then we define three random matrices $x,y,z$, chosen to be $5\times
5$:

<<defxyz>>=
x <- matrix(rnorm(25),5,5)
y <- matrix(rnorm(25),5,5)
z <- matrix(rnorm(25),5,5)
@

We may then translate the free algebra calculations into R matrix
idiom:

<<defamatrix>>=
A_matrix <- x %*% x %*% y %*% x + 2*z %*% y
B_matrix <- 3*y %*% y %*% y %*% y -2*z
@

We then calculate the matrix product $AB$ in two ways:

<<matprod2ways>>=
AB_matrix_way1 <- A_matrix %*% B_matrix
AB_matrix_way2 <- (
+3*x %*% x %*% y %*% x %*% y %*% y %*% y %*% y
-2*x %*% x %*% y %*% x %*% z
+6*z %*% y %*% y %*% y %*% y %*% y
-4*z %*% y %*% z
)
@

Above we calculate the product firstly using R's matrix multiplication
{\tt \%*\%} and secondly using the {\tt freealg} product operation.
The two methods should agree:

<<abway1minusabway2>>=
AB_matrix_way1
AB_matrix_way2
AB_matrix_way1 - AB_matrix_way2
@

and indeed we see only small numerical rounding error.

\section{Conclusions and further work}

The {\tt freealg} package furnishes R-centric computational support
for working with the free algebra, leveraging the efficiency of the
{\tt STL} map class.  Further work might include utilities for
manipulating free Lie algebras.

\bibliographystyle{apalike}
\bibliography{freealg_arxiv}

\end{document}
