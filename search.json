[{"path":"https://robinhankin.github.io/freealg/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor covenant code of conduct","title":"Contributor covenant code of conduct","text":"members, contributors, leaders wish make participation community pleasant productive experience everyone. try act interact ways contribute open, welcoming, inclusive, healthy community. assume good faith, per WP:AGF. Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people Communicating respectfully differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community","code":""},{"path":"https://robinhankin.github.io/freealg/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to freealg","title":"Contributing to freealg","text":"Thank considering contributing freealg! appreciate interest making project better. Please read adhere Code Conduct maintain safe, welcoming, inclusive environment. Various forms contributions welcome: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides: help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome. Tests checks run CI, however locally one can use: devtools::test(). Ideally change documented. Major changes vignettes.","code":""},{"path":"https://robinhankin.github.io/freealg/articles/freealg.html","id":"the-freealg-package-in-use","dir":"Articles","previous_headings":"","what":"The freealg package in use","title":"The free algebra with R","text":"examples little general freealg package; idiom requires specific numerical values coefficients α,β,γ\\alpha,\\beta,\\gamma. use 1,2,31,2,3 respectively. Note terms stored implementation-specific order. example, might appear xxyz + 2*zy algebraically equivalent form 2*zy + xxyz. package follows disordR discipline (Hankin 2022a). Inverses coded using upper-case letters. See multiplying X=x−1X=x^{-1} right cancels one x terms . can use device complicated examples: objects may verify distributive associative laws true: Various utilities included package. example, commutator bracket represented reasonably concise idiom: Using rfalg() generate random free algebra objects, may verify Jacobi identity: package includes functionality substitution:","code":"(A <- as.freealg(\"xxyx + 2zy\")) ## free algebra element algebraically equal to ## + xxyx + 2zy (B <- as.freealg(\"-2zy + 3yyyy\")) ## free algebra element algebraically equal to ## + 3yyyy - 2zy A+B ## free algebra element algebraically equal to ## + xxyx + 3yyyy A*B ## free algebra element algebraically equal to ## + 3xxyxyyyy - 2xxyxzy + 6zyyyyy - 4zyzy B*A ## free algebra element algebraically equal to ## + 3yyyyxxyx + 6yyyyzy - 2zyxxyx - 4zyzy A*as.freealg(\"X\") # X = x^{-1} ## free algebra element algebraically equal to ## + xxy + 2zyX (C <- as.freealg(\"3 + 5X - 2Xyx\")) ## free algebra element algebraically equal to ## + 3 + 5X - 2Xyx A*C ## free algebra element algebraically equal to ## + 5xxy + 3xxyx - 2xxyyx + 6zy + 10zyX - 4zyXyx C*A ## free algebra element algebraically equal to ## - 2Xyxxxyx - 4Xyxzy + 10Xzy + 3xxyx + 5xyx + 6zy A*(B+C) == A*B + A*C ## [1] TRUE (A+B)*C == A*C + B*C ## [1] TRUE A*(B*C) == (A*B)*C ## [1] TRUE a <- as.freealg(\"a\") b <- as.freealg(\"b\") .[a,b] # returns ab-ba ## free algebra element algebraically equal to ## + ab - ba x <- rfalg() y <- rfalg() z <- rfalg()  .[x,.[y,z]] + .[y,.[z,x]] + .[z,.[x,y]] ## free algebra element algebraically equal to ## 0 subs(\"aabccc\",b=\"1+3x\")  # aa(1+3x)ccc ## free algebra element algebraically equal to ## + aaccc + 3aaxccc subs(\"abccc\",b=\"1+3x\",x=\"1+d+2e\") ## free algebra element algebraically equal to ## + 4accc + 3adccc + 6aeccc"},{"path":"https://robinhankin.github.io/freealg/articles/freealg.html","id":"experimental-functionality","dir":"Articles","previous_headings":"The freealg package in use","what":"Experimental functionality","title":"The free algebra with R","text":"possible extract components freealg objects using reasonably standard idiom: even experimental functionality calculus: , “da” means differential . Note may appear position product, just end (cf matrix differentiation).","code":"(a <- as.freealg(\"aaa + 2*aaba + 3*abbbba + 9*xyzabc - 3*abc\")) ## free algebra element algebraically equal to ## + aaa + 2aaba + 3abbbba - 3abc + 9xyzabc a[coeffs(a) > 2] ## free algebra element algebraically equal to ## + 3abbbba + 9xyzabc a[coeffs(a) < 0] <- 99 a ## free algebra element algebraically equal to ## + aaa + 2aaba + 3abbbba + 99abc + 9xyzabc deriv(as.freealg(\"aaaxaa\"),\"a\") ## free algebra element algebraically equal to ## + aaaxa(da) + aaax(da)a + aa(da)xaa + a(da)axaa + (da)aaxaa"},{"path":[]},{"path":"https://robinhankin.github.io/freealg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/freealg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin RKS (2022). “free algebra R.” doi:10.48550/ARXIV.2211.04002.","code":"@Misc{,   title = {The free algebra in R},   author = {Robin K. S. Hankin},   year = {2022},   publisher = {arXiv},   doi = {10.48550/ARXIV.2211.04002}, }"},{"path":[]},{"path":"https://robinhankin.github.io/freealg/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"The Free Algebra","text":"free algebra interesting useful object. present freealg package provides functionality free algebra R programming environment. package uses C++ map class efficiency conforms disordR discipline. Several use-cases provided.","code":""},{"path":"https://robinhankin.github.io/freealg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Free Algebra","text":"can install released version freealg CRAN :","code":"# install.packages(\"freealg\")  # uncomment this to install the package library(\"freealg\")"},{"path":"https://robinhankin.github.io/freealg/index.html","id":"the-free-algebra","dir":"","previous_headings":"","what":"The free algebra","title":"The Free Algebra","text":"free algebra free R-module basis consisting words alphabet symbols multiplication words defined concatenation. Thus, alphabet  natural easily implemented extension use upper-case symbols represent multiplicative inverses lower-case equivalents (formally use presentation ). Thus system inherits associativity associativity concatenation, distributivity assumed, commutative.","code":""},{"path":"https://robinhankin.github.io/freealg/index.html","id":"the-freealg-package-in-use","dir":"","previous_headings":"","what":"The freealg package in use","title":"The Free Algebra","text":"Creating free algebra object straightforward. can coerce character string natural idiom: use formal method: can demonstrate associativity (non-trivial): (function rfalg() generates random freealg objects). ","code":"X <- as.freealg(\"1 + 3a + 5b + 5abba\") X #> free algebra element algebraically equal to #> + 1 + 3*a + 5*abba + 5*b freealg(sapply(1:5,seq_len),1:5) #> free algebra element algebraically equal to #> + a + 2*ab + 3*abc + 4*abcd + 5*abcde Y <- as.freealg(\"6 - 4a +2aaab\") X+Y #> free algebra element algebraically equal to #> + 7 - a + 2*aaab + 5*abba + 5*b X*Y #> free algebra element algebraically equal to #> + 6 + 14*a - 12*aa + 6*aaaab + 2*aaab + 30*abba - 20*abbaa + 10*abbaaaab + 30*b #> - 20*ba + 10*baaab X^2 #> free algebra element algebraically equal to #> + 1 + 6*a + 9*aa + 15*aabba + 15*ab + 10*abba + 15*abbaa + 25*abbaabba + #> 25*abbab + 10*b + 15*ba + 25*babba + 25*bb set.seed(0) (x1 <- rfalg(inc=TRUE)) #> free algebra element algebraically equal to #> + 7*C + 6*Ca + 4*B + 3*BC + a + 5*aCBB + 2*bc (x2 <- rfalg(inc=TRUE)) #> free algebra element algebraically equal to #> + 6 + CAAA + 2*Ca + 3*Cbcb + 7*aaCA + 4*b + 5*c (x3 <- rfalg(inc=TRUE)) #> free algebra element algebraically equal to #> + 3*C + 5*CbAc + BACB + 2*a + 10*b + 7*cb x1*(x2*x3) == (x1*x2)*x3 #> [1] TRUE"},{"path":"https://robinhankin.github.io/freealg/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"The Free Algebra","text":"detail, see package vignette vignette(\"freealg\")","code":""},{"path":"https://robinhankin.github.io/freealg/reference/Ops.freealg.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Ops methods for the the free algebra — Ops.freealg","title":"Arithmetic Ops methods for the the free algebra — Ops.freealg","text":"Arithmetic operators manipulation freealg objects   addition, multiplication, powers, etc","code":""},{"path":"https://robinhankin.github.io/freealg/reference/Ops.freealg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Ops methods for the the free algebra — Ops.freealg","text":"","code":"# S3 method for class 'freealg' Ops(e1, e2) free_negative(S) free_power_scalar(S,n) free_eq_free(e1,e2) free_plus_numeric(S,x) free_plus_free(e1,e2) lowlevel_simplify(words,coeffs) lowlevel_free_prod(words1,coeffs1,words2,coeffs2) lowlevel_free_sum(words1,coeffs1,words2,coeffs2) lowlevel_free_power(words,coeffs,n) lowlevel_diffn(words,coeffs,r) lowlevel_subs(words1, coeffs1, words2, coeffs2, r) inv(S)"},{"path":"https://robinhankin.github.io/freealg/reference/Ops.freealg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Ops methods for the the free algebra — Ops.freealg","text":"S,e1,e2 Objects class freealg n Integer, possibly non-positive r Integer vector indicating variables differentiate   respect x Scalar value words,words1,words2 list words, , list integer vectors     representing variables term coeffs,coeffs1,coeffs2 Numeric vector representing     coefficients word","code":""},{"path":"https://robinhankin.github.io/freealg/reference/Ops.freealg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic Ops methods for the the free algebra — Ops.freealg","text":"function Ops.freealg() passes binary arithmetic operators   (“+”, “-”, “*”,   “^”, “==”) appropriate   specialist function. caret, ^n, denotes arithmetic exponentiation,   x^3==x*x*x.  experimental feature, (sort )   vectorised: n vector, ^n returns sum   raised power element n.  example,   ^c(n1,n2,n3) ^n1 + ^n2 + ^n3.  Internally,   n tabulated interests efficiency,   ^c(0,2,5,5,5,) = 1 + ^2 + 3a^5 evaluated   single fifth power.  Similar functionality implemented   mvp package. comparison operators equality inequality; x==y   defined .zero(x-y). Functions lowlevel_foo() low-level functions interface   directly C routines src/ directory   intended end-user. Function inv() defined freealg objects   single term.  x single term   inv(x)*x=x*inv(x)=1.  corresponding division   package /b may either *inv(b)   inv(b)*.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/Ops.freealg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arithmetic Ops methods for the the free algebra — Ops.freealg","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/Ops.freealg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Ops methods for the the free algebra — Ops.freealg","text":"","code":"rfalg() #> free algebra element algebraically equal to #> + 9a + 2baaa + 10cab + cabc + 6ccb as.freealg(\"1+x+xy+yx\")  # variables are non-commutative #> free algebra element algebraically equal to #> + 1 + x + xy + yx as.freealg(\"x\") * as.freealg(\"X\") # upper-case letters are lower-case inverses #> free algebra element algebraically equal to #> + 1  constant(as.freealg(\"x+y+X+Y\")^6)  # OEIS sequence A035610 #> [1] 232  inv(as.freealg(\"2aaabAAAAx\")) #> free algebra element algebraically equal to #> + 0.5XaaaaBAAA  as.freealg(\"a\")^(1:7) #> free algebra element algebraically equal to #> + a + aa + aaa + aaaa + aaaaa + aaaaaa + aaaaaaa"},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":null,"dir":"Reference","previous_headings":"","what":"Abelianize a freealg object — abelianize","title":"Abelianize a freealg object — abelianize","text":"Function abelianize() returns freealg object equivalent argument assumption Abelianness.  symbols placed alphabetical order.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abelianize a freealg object — abelianize","text":"","code":"abelianize(x)"},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abelianize a freealg object — abelianize","text":"x freealg object","code":""},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Abelianize a freealg object — abelianize","text":"Abelianizing free group element means symbols can commute past one another.  Abelianization vectorized.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abelianize a freealg object — abelianize","text":"Returns object class freealg.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Abelianize a freealg object — abelianize","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Abelianize a freealg object — abelianize","text":"similar function freegroup   package.  However, frab package best way work   free Abelian group.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/abelianize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abelianize a freealg object — abelianize","text":"","code":"abelianize(as.freealg(\"ba + 2abbba + 3abAB\")) #> free algebra element algebraically equal to #> + 3 + 2aabbb + ab  abelianize(.[rfalg(),rfalg()]) #> free algebra element algebraically equal to #> 0"},{"path":"https://robinhankin.github.io/freealg/reference/accessor.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor methods for freealg objects — accessor","title":"Accessor methods for freealg objects — accessor","text":"Accessor methods free algebra objects","code":""},{"path":"https://robinhankin.github.io/freealg/reference/accessor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor methods for freealg objects — accessor","text":"","code":"words(x) coeffs(x,drop=TRUE) coeffs(x) <- value"},{"path":"https://robinhankin.github.io/freealg/reference/accessor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor methods for freealg objects — accessor","text":"x Object class freealg value Numeric vector length 1 drop Boolean, default TRUE meaning drop     disord attribute, per disordR::drop()     FALSE meaning consistently return disord object     irregardless","code":""},{"path":"https://robinhankin.github.io/freealg/reference/accessor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessor methods for freealg objects — accessor","text":"Access set different parts freealg object.  constant term technically coefficient documented constant.Rd. “Pure” extraction replacement ([] [] <- value implemented exprimentally.  code extraction cute particularly efficient.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/accessor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor methods for freealg objects — accessor","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/accessor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Accessor methods for freealg objects — accessor","text":"extended discussion disordR discipline context algebras mvp package accessor.Rd.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freealg/reference/accessor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor methods for freealg objects — accessor","text":"","code":"a <- rfalg() a #> free algebra element algebraically equal to #> + 9a + aba + 3acac + 13b + 2c coeffs(a) #> A disord object with hash a721c8fd8dd0657fb6cb74ff05462059b0a31ebb and elements #> [1]  9  1  3 13  2 #> (in some order) words(a)  # NB: hash is identical to that of coeffs(a) #> A disord object with hash a721c8fd8dd0657fb6cb74ff05462059b0a31ebb and elements #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 1 2 1 #>  #> [[3]] #> [1] 1 3 1 3 #>  #> [[4]] #> [1] 2 #>  #> [[5]] #> [1] 3 #>  #> (in some order)  coeffs(a) <- 7   # replacement methods work  a #> free algebra element algebraically equal to #> + 7a + 7aba + 7acac + 7b + 7c coeffs(a)  # #> [1] 7 7 7 7 7"},{"path":"https://robinhankin.github.io/freealg/reference/adjoint.html","id":null,"dir":"Reference","previous_headings":"","what":"The adjoint map — adjoint","title":"The adjoint map — adjoint","text":"adjoint \\(\\mathrm{ad}_X\\) \\(X\\) map   Lie group \\(G\\) endomorphism group \\(G\\) defined   \\[\\mathrm{ad}_X(Y)=\\left[X,Y\\right]\\]","code":""},{"path":"https://robinhankin.github.io/freealg/reference/adjoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The adjoint map — adjoint","text":"","code":"ad(x)"},{"path":"https://robinhankin.github.io/freealg/reference/adjoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The adjoint map — adjoint","text":"x Object nominally class freealg classes     accepted make sense","code":""},{"path":"https://robinhankin.github.io/freealg/reference/adjoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The adjoint map — adjoint","text":"details ","code":""},{"path":"https://robinhankin.github.io/freealg/reference/adjoint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The adjoint map — adjoint","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/adjoint.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The adjoint map — adjoint","text":"Vignette adjoint gives description","code":""},{"path":"https://robinhankin.github.io/freealg/reference/adjoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The adjoint map — adjoint","text":"","code":"x <- rfalg() y <- rfalg()  f <- ad(x) f(y) #> free algebra element algebraically equal to #> - aaccabac - 5aaccabbb - 2aaccac - 7aaccbc - 6aaccc - 4aacccbba - 3aaccccbb + #> abacaacc + 4abacac + 7abacc + 3abaccac + 6abaccb + 7abaccccb + 5abbbaacc + #> 20abbbac + 35abbbc + 15abbbcac + 30abbbcb + 35abbbcccb + 2acaacc - 4acabac - #> 20acabbb - 28acbc - 10acc + 6accac + 12accb - 16accbba - 12acccbb + 14accccb + #> 7bcaacc + 28bcac + 49bcc + 21bccac + 42bccb + 49bccccb + 6caacc - 7cabac - #> 35cabbb + 10cac - 3cacabac - 15cacabbb - 6cacac - 21cacbc - 18cacc - 12caccbba #> - 9cacccbb - 6cbabac - 30cbabbb - 12cbac + 4cbbaaacc + 16cbbaac + 28cbbac + #> 12cbbacac + 24cbbacb + 28cbbacccb - 42cbbc - 85cbc - 24cbcbba - 18cbccbb + #> 18ccac + 36ccb - 28ccbba + 3ccbbaacc + 12ccbbac + 21ccbbc + 9ccbbcac + 18ccbbcb #> + 21ccbbcccb - 7cccbabac - 35cccbabbb - 14cccbac - 21cccbb - 49cccbbc - 42cccbc #> - 28cccbcbba - 21cccbccbb + 42ccccb   f(f(y)) # [x,[x,y]] #> free algebra element algebraically equal to #> + aaccabacabac + 5aaccabacabbb + 2aaccabacac + 7aaccabacbc + 6aaccabacc + #> 4aaccabaccbba + 3aaccabacccbb + 5aaccabbbabac + 25aaccabbbabbb + 10aaccabbbac + #> 35aaccabbbbc + 30aaccabbbc + 20aaccabbbcbba + 15aaccabbbccbb + 2aaccacabac + #> 10aaccacabbb + 4aaccacac + 14aaccacbc + 12aaccacc + 8aaccaccbba + 6aaccacccbb + #> 7aaccbcabac + 35aaccbcabbb + 14aaccbcac + 49aaccbcbc + 42aaccbcc + 28aaccbccbba #> + 21aaccbcccbb + 6aacccabac + 30aacccabbb + 12aacccac + 4aacccbbaabac + #> 20aacccbbaabbb + 8aacccbbaac + 28aacccbbabc + 24aacccbbac + 16aacccbbacbba + #> 12aacccbbaccbb + 42aacccbc + 36aacccc + 24aaccccbba + 3aaccccbbabac + #> 15aaccccbbabbb + 6aaccccbbac + 21aaccccbbbc + 18aaccccbbc + 12aaccccbbcbba + #> 9aaccccbbccbb + 18aacccccbb - 2abacaaccabac - 10abacaaccabbb - 4abacaaccac - #> 14abacaaccbc - 12abacaaccc - 8abacaacccbba - 6abacaaccccbb + abacabacaacc + #> 4abacabacac + 7abacabacc + 3abacabaccac + 6abacabaccb + 7abacabaccccb + #> 5abacabbbaacc + 20abacabbbac + 35abacabbbc + 15abacabbbcac + 30abacabbbcb + #> 35abacabbbcccb + 2abacacaacc - 8abacacabac - 40abacacabbb - 8abacacac - #> 56abacacbc - 34abacacc + 6abacaccac + 12abacaccb - 32abacaccbba - 24abacacccbb #> + 14abacaccccb + 7abacbcaacc + 28abacbcac + 49abacbcc + 21abacbccac + #> 42abacbccb + 49abacbccccb + 6abaccaacc - 14abaccabac - 70abaccabbb - 4abaccac - #> 6abaccacabac - 30abaccacabbb - 12abaccacac - 42abaccacbc - 36abaccacc - #> 24abaccaccbba - 18abaccacccbb - 12abaccbabac - 60abaccbabbb - 24abaccbac + #> 4abaccbbaaacc + 16abaccbbaac + 28abaccbbac + 12abaccbbacac + 24abaccbbacb + #> 28abaccbbacccb - 84abaccbbc - 170abaccbc - 48abaccbcbba - 36abaccbccbb - #> 42abaccc + 18abacccac + 36abacccb - 56abacccbba + 3abacccbbaacc + 12abacccbbac #> + 21abacccbbc + 9abacccbbcac + 18abacccbbcb + 21abacccbbcccb - 14abaccccbabac - #> 70abaccccbabbb - 28abaccccbac - 42abaccccbb - 98abaccccbbc - 84abaccccbc - #> 56abaccccbcbba - 42abaccccbccbb + 42abacccccb - 10abbbaaccabac - 50abbbaaccabbb #> - 20abbbaaccac - 70abbbaaccbc - 60abbbaaccc - 40abbbaacccbba - 30abbbaaccccbb + #> 5abbbabacaacc + 20abbbabacac + 35abbbabacc + 15abbbabaccac + 30abbbabaccb + #> 35abbbabaccccb + 25abbbabbbaacc + 100abbbabbbac + 175abbbabbbc + 75abbbabbbcac #> + 150abbbabbbcb + 175abbbabbbcccb + 10abbbacaacc - 40abbbacabac - 200abbbacabbb #> - 40abbbacac - 280abbbacbc - 170abbbacc + 30abbbaccac + 60abbbaccb - #> 160abbbaccbba - 120abbbacccbb + 70abbbaccccb + 35abbbbcaacc + 140abbbbcac + #> 245abbbbcc + 105abbbbccac + 210abbbbccb + 245abbbbccccb + 30abbbcaacc - #> 70abbbcabac - 350abbbcabbb - 20abbbcac - 30abbbcacabac - 150abbbcacabbb - #> 60abbbcacac - 210abbbcacbc - 180abbbcacc - 120abbbcaccbba - 90abbbcacccbb - #> 60abbbcbabac - 300abbbcbabbb - 120abbbcbac + 20abbbcbbaaacc + 80abbbcbbaac + #> 140abbbcbbac + 60abbbcbbacac + 120abbbcbbacb + 140abbbcbbacccb - 420abbbcbbc - #> 850abbbcbc - 240abbbcbcbba - 180abbbcbccbb - 210abbbcc + 90abbbccac + #> 180abbbccb - 280abbbccbba + 15abbbccbbaacc + 60abbbccbbac + 105abbbccbbc + #> 45abbbccbbcac + 90abbbccbbcb + 105abbbccbbcccb - 70abbbcccbabac - #> 350abbbcccbabbb - 140abbbcccbac - 210abbbcccbb - 490abbbcccbbc - 420abbbcccbc - #> 280abbbcccbcbba - 210abbbcccbccbb + 210abbbccccb - 4acaaccabac - 20acaaccabbb - #> 8acaaccac - 28acaaccbc - 24acaaccc - 16acaacccbba - 12acaaccccbb + 2acabacaacc #> + 4acabacabac + 20acabacabbb + 16acabacac + 28acabacbc + 38acabacc + 6acabaccac #> + 12acabaccb + 16acabaccbba + 12acabacccbb + 14acabaccccb + 10acabbbaacc + #> 20acabbbabac + 100acabbbabbb + 80acabbbac + 140acabbbbc + 190acabbbc + #> 30acabbbcac + 60acabbbcb + 80acabbbcbba + 60acabbbccbb + 70acabbbcccb + #> 4acacaacc - 8acacabac - 40acacabbb - 56acacbc - 20acacc + 12acaccac + 24acaccb #> - 32acaccbba - 24acacccbb + 28acaccccb + 14acbcaacc + 28acbcabac + 140acbcabbb #> + 112acbcac + 196acbcbc + 266acbcc + 42acbccac + 84acbccb + 112acbccbba + #> 84acbcccbb + 98acbccccb + 12accaacc - 4accabac - 20accabbb + 40accac - #> 12accacabac - 60accacabbb - 24accacac - 84accacbc - 72accacc - 48accaccbba - #> 36accacccbb - 24accbabac - 120accbabbb - 48accbac + 8accbbaaacc + 16accbbaabac #> + 80accbbaabbb + 64accbbaac + 112accbbabc + 152accbbac + 24accbbacac + #> 48accbbacb + 64accbbacbba + 48accbbaccbb + 56accbbacccb - 168accbbc - 172accbc #> - 96accbcbba - 72accbccbb + 60accc + 36acccac + 72acccb - 16acccbba + #> 6acccbbaacc + 12acccbbabac + 60acccbbabbb + 48acccbbac + 84acccbbbc + #> 114acccbbc + 18acccbbcac + 36acccbbcb + 48acccbbcbba + 36acccbbccbb + #> 42acccbbcccb - 28accccbabac - 140accccbabbb - 56accccbac - 12accccbb - #> 196accccbbc - 168accccbc - 112accccbcbba - 84accccbccbb + 84acccccb - #> 14bcaaccabac - 70bcaaccabbb - 28bcaaccac - 98bcaaccbc - 84bcaaccc - #> 56bcaacccbba - 42bcaaccccbb + 7bcabacaacc + 28bcabacac + 49bcabacc + #> 21bcabaccac + 42bcabaccb + 49bcabaccccb + 35bcabbbaacc + 140bcabbbac + #> 245bcabbbc + 105bcabbbcac + 210bcabbbcb + 245bcabbbcccb + 14bcacaacc - #> 56bcacabac - 280bcacabbb - 56bcacac - 392bcacbc - 238bcacc + 42bcaccac + #> 84bcaccb - 224bcaccbba - 168bcacccbb + 98bcaccccb + 49bcbcaacc + 196bcbcac + #> 343bcbcc + 147bcbccac + 294bcbccb + 343bcbccccb + 42bccaacc - 98bccabac - #> 490bccabbb - 28bccac - 42bccacabac - 210bccacabbb - 84bccacac - 294bccacbc - #> 252bccacc - 168bccaccbba - 126bccacccbb - 84bccbabac - 420bccbabbb - 168bccbac #> + 28bccbbaaacc + 112bccbbaac + 196bccbbac + 84bccbbacac + 168bccbbacb + #> 196bccbbacccb - 588bccbbc - 1190bccbc - 336bccbcbba - 252bccbccbb - 294bccc + #> 126bcccac + 252bcccb - 392bcccbba + 21bcccbbaacc + 84bcccbbac + 147bcccbbc + #> 63bcccbbcac + 126bcccbbcb + 147bcccbbcccb - 98bccccbabac - 490bccccbabbb - #> 196bccccbac - 294bccccbb - 686bccccbbc - 588bccccbc - 392bccccbcbba - #> 294bccccbccbb + 294bcccccb - 12caaccabac - 60caaccabbb - 24caaccac - 84caaccbc #> - 72caaccc - 48caacccbba - 36caaccccbb + 6cabacaacc + 7cabacabac + 35cabacabbb #> + 38cabacac + 49cabacbc + 84cabacc + 18cabaccac + 36cabaccb + 28cabaccbba + #> 21cabacccbb + 42cabaccccb + 30cabbbaacc + 35cabbbabac + 175cabbbabbb + #> 190cabbbac + 245cabbbbc + 420cabbbc + 90cabbbcac + 180cabbbcb + 140cabbbcbba + #> 105cabbbccbb + 210cabbbcccb + 12cacaacc - 34cacabac + 3cacabacabac + #> 15cacabacabbb + 6cacabacac + 21cacabacbc + 18cacabacc + 12cacabaccbba + #> 9cacabacccbb - 170cacabbb + 15cacabbbabac + 75cacabbbabbb + 30cacabbbac + #> 105cacabbbbc + 90cacabbbc + 60cacabbbcbba + 45cacabbbccbb - 20cacac + #> 6cacacabac + 30cacacabbb + 12cacacac + 42cacacbc + 36cacacc + 24cacaccbba + #> 18cacacccbb - 238cacbc + 21cacbcabac + 105cacbcabbb + 42cacbcac + 147cacbcbc + #> 126cacbcc + 84cacbccbba + 63cacbcccbb - 120cacc + 18caccabac + 90caccabbb + #> 72caccac + 72caccb - 136caccbba + 12caccbbaabac + 60caccbbaabbb + 24caccbbaac + #> 84caccbbabc + 72caccbbac + 48caccbbacbba + 36caccbbaccbb + 126caccbc + 108caccc #> - 102cacccbb + 72cacccbba + 9cacccbbabac + 45cacccbbabbb + 18cacccbbac + #> 63cacccbbbc + 54cacccbbc + 36cacccbbcbba + 27cacccbbccbb + 84caccccb + #> 54caccccbb + 6cbabacabac + 30cbabacabbb + 12cbabacac + 42cbabacbc + 36cbabacc + #> 24cbabaccbba + 18cbabacccbb + 30cbabbbabac + 150cbabbbabbb + 60cbabbbac + #> 210cbabbbbc + 180cbabbbc + 120cbabbbcbba + 90cbabbbccbb + 12cbacabac + #> 60cbacabbb + 24cbacac + 84cbacbc + 72cbacc + 48cbaccbba + 36cbacccbb - #> 8cbbaaaccabac - 40cbbaaaccabbb - 16cbbaaaccac - 56cbbaaaccbc - 48cbbaaaccc - #> 32cbbaaacccbba - 24cbbaaaccccbb + 4cbbaabacaacc + 16cbbaabacac + 28cbbaabacc + #> 12cbbaabaccac + 24cbbaabaccb + 28cbbaabaccccb + 20cbbaabbbaacc + 80cbbaabbbac + #> 140cbbaabbbc + 60cbbaabbbcac + 120cbbaabbbcb + 140cbbaabbbcccb + 8cbbaacaacc - #> 32cbbaacabac - 160cbbaacabbb - 32cbbaacac - 224cbbaacbc - 136cbbaacc + #> 24cbbaaccac + 48cbbaaccb - 128cbbaaccbba - 96cbbaacccbb + 56cbbaaccccb + #> 28cbbabcaacc + 112cbbabcac + 196cbbabcc + 84cbbabccac + 168cbbabccb + #> 196cbbabccccb + 24cbbacaacc - 56cbbacabac - 280cbbacabbb - 16cbbacac - #> 24cbbacacabac - 120cbbacacabbb - 48cbbacacac - 168cbbacacbc - 144cbbacacc - #> 96cbbacaccbba - 72cbbacacccbb - 48cbbacbabac - 240cbbacbabbb - 96cbbacbac + #> 16cbbacbbaaacc + 64cbbacbbaac + 112cbbacbbac + 48cbbacbbacac + 96cbbacbbacb + #> 112cbbacbbacccb - 336cbbacbbc - 680cbbacbc - 192cbbacbcbba - 144cbbacbccbb - #> 168cbbacc + 72cbbaccac + 144cbbaccb - 224cbbaccbba + 12cbbaccbbaacc + #> 48cbbaccbbac + 84cbbaccbbc + 36cbbaccbbcac + 72cbbaccbbcb + 84cbbaccbbcccb - #> 56cbbacccbabac - 280cbbacccbabbb - 112cbbacccbac - 168cbbacccbb - 392cbbacccbbc #> - 336cbbacccbc - 224cbbacccbcbba - 168cbbacccbccbb + 168cbbaccccb + 42cbbcabac #> + 210cbbcabbb + 84cbbcac + 294cbbcbc + 252cbbcc + 168cbbccbba + 126cbbcccbb + #> 42cbcaacc + 85cbcabac + 425cbcabbb + 338cbcac + 24cbcbbaabac + 120cbcbbaabbb + #> 48cbcbbaac + 168cbcbbabc + 144cbcbbac + 96cbcbbacbba + 72cbcbbaccbb + 595cbcbc #> + 804cbcc + 126cbccac + 252cbccb + 340cbccbba + 18cbccbbabac + 90cbccbbabbb + #> 36cbccbbac + 126cbccbbbc + 108cbccbbc + 72cbccbbcbba + 54cbccbbccbb + #> 255cbcccbb + 294cbccccb + 36ccaacc - 42ccabac - 210ccabbb + 60ccac - 36ccacabac #> - 180ccacabbb - 72ccacac - 252ccacbc - 216ccacc - 144ccaccbba - 108ccacccbb - #> 72ccbabac - 360ccbabbb - 144ccbac + 24ccbbaaacc + 28ccbbaabac + 140ccbbaabbb + #> 152ccbbaac - 6ccbbaaccabac - 30ccbbaaccabbb - 12ccbbaaccac - 42ccbbaaccbc - #> 36ccbbaaccc - 24ccbbaacccbba - 18ccbbaaccccbb + 3ccbbabacaacc + 12ccbbabacac + #> 21ccbbabacc + 9ccbbabaccac + 18ccbbabaccb + 21ccbbabaccccb + 15ccbbabbbaacc + #> 60ccbbabbbac + 105ccbbabbbc + 45ccbbabbbcac + 90ccbbabbbcb + 105ccbbabbbcccb + #> 196ccbbabc + 336ccbbac + 6ccbbacaacc - 24ccbbacabac - 120ccbbacabbb + #> 48ccbbacac + 144ccbbacb + 112ccbbacbba - 168ccbbacbc - 102ccbbacc + 18ccbbaccac #> + 36ccbbaccb + 84ccbbaccbb - 96ccbbaccbba + 168ccbbacccb - 72ccbbacccbb + #> 42ccbbaccccb + 21ccbbbcaacc + 84ccbbbcac + 147ccbbbcc + 63ccbbbccac + #> 126ccbbbccb + 147ccbbbccccb - 504ccbbc + 18ccbbcaacc - 42ccbbcabac - #> 210ccbbcabbb - 12ccbbcac - 18ccbbcacabac - 90ccbbcacabbb - 36ccbbcacac - #> 126ccbbcacbc - 108ccbbcacc - 72ccbbcaccbba - 54ccbbcacccbb - 36ccbbcbabac - #> 180ccbbcbabbb - 72ccbbcbac + 12ccbbcbbaaacc + 48ccbbcbbaac + 84ccbbcbbac + #> 36ccbbcbbacac + 72ccbbcbbacb + 84ccbbcbbacccb - 252ccbbcbbc - 510ccbbcbc - #> 144ccbbcbcbba - 108ccbbcbccbb - 126ccbbcc + 54ccbbccac + 108ccbbccb - #> 168ccbbccbba + 9ccbbccbbaacc + 36ccbbccbbac + 63ccbbccbbc + 27ccbbccbbcac + #> 54ccbbccbbcb + 63ccbbccbbcccb - 42ccbbcccbabac - 210ccbbcccbabbb - 84ccbbcccbac #> - 126ccbbcccbb - 294ccbbcccbbc - 252ccbbcccbc - 168ccbbcccbcbba - #> 126ccbbcccbccbb + 126ccbbccccb - 726ccbc - 288ccbcbba - 216ccbccbb + 108cccac + #> 216cccb + 7cccbabacabac + 35cccbabacabbb + 14cccbabacac + 49cccbabacbc + #> 42cccbabacc + 28cccbabaccbba + 21cccbabacccbb + 35cccbabbbabac + #> 175cccbabbbabbb + 70cccbabbbac + 245cccbabbbbc + 210cccbabbbc + 140cccbabbbcbba #> + 105cccbabbbccbb + 14cccbacabac + 70cccbacabbb + 28cccbacac + 98cccbacbc + #> 84cccbacc + 56cccbaccbba + 42cccbacccbb - 168cccbba + 18cccbbaacc + 21cccbbabac #> + 105cccbbabbb + 114cccbbac + 147cccbbbc + 252cccbbc + 49cccbbcabac + #> 245cccbbcabbb + 152cccbbcac + 108cccbbcb + 84cccbbcbba + 343cccbbcbc + #> 294cccbbcc + 63cccbbccbb + 196cccbbccbba + 126cccbbcccb + 147cccbbcccbb + #> 42cccbcabac + 210cccbcabbb + 84cccbcac + 28cccbcbbaabac + 140cccbcbbaabbb + #> 56cccbcbbaac + 196cccbcbbabc + 168cccbcbbac + 112cccbcbbacbba + 84cccbcbbaccbb #> + 294cccbcbc + 252cccbcc + 168cccbccbba + 21cccbccbbabac + 105cccbccbbabbb + #> 42cccbccbbac + 147cccbccbbbc + 126cccbccbbc + 84cccbccbbcbba + 63cccbccbbccbb + #> 126cccbcccbb - 84ccccbabac - 420ccccbabbb - 168ccccbac - 126ccccbb - 588ccccbbc #> - 504ccccbc - 336ccccbcbba - 252ccccbccbb + 252cccccb"},{"path":"https://robinhankin.github.io/freealg/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"The constant term — constant","title":"The constant term — constant","text":"Get set constant term freealg object","code":""},{"path":"https://robinhankin.github.io/freealg/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The constant term — constant","text":"","code":"# S3 method for class 'freealg' constant(x) # S3 method for class 'numeric' constant(x) # S3 method for class 'freealg' constant(x) <- value is.constant(x)"},{"path":"https://robinhankin.github.io/freealg/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The constant term — constant","text":"x Object class freealg value Scalar value constant","code":""},{"path":"https://robinhankin.github.io/freealg/reference/constant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The constant term — constant","text":"constant term free algebra object coefficient   empty term.  freealg object, map including   \\(\\emptyset\\longrightarrow v\\) implies \\(v\\)   constant. x freealg object, constant(x) returns   value constant multivariate polynomial; x   numeric, returns constant freealg object value   x. Function .constant() returns TRUE argument   variables FALSE otherwise. Setting coefficients empty freealg returns zero   (empty) object.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/constant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The constant term — constant","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The constant term — constant","text":"","code":"p <- as.freealg(\"1+X+Y+xy\")  constant(p) #> [1] 1 constant(p^5) #> [1] 31  constant(p) <- 1000 p #> free algebra element algebraically equal to #> + 1000 + Y + X + xy"},{"path":"https://robinhankin.github.io/freealg/reference/deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiation of freealg objects — deriv","title":"Differentiation of freealg objects — deriv","text":"Differentiation freealg objects","code":""},{"path":"https://robinhankin.github.io/freealg/reference/deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiation of freealg objects — deriv","text":"","code":"# S3 method for class 'freealg' deriv(expr, r, ...)"},{"path":"https://robinhankin.github.io/freealg/reference/deriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiation of freealg objects — deriv","text":"expr Object class freealg r Integer vector.  Elements denote variables differentiate     respect .  r character vector,     interpreted =1,b=2,...,z=26; length 1,     “aab” interpreted c(\"\",\"\",\"b\") ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/freealg/reference/deriv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Differentiation of freealg objects — deriv","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/deriv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiation of freealg objects — deriv","text":"Experimental function deriv(S,v) returns       \\(\\frac{\\partial^r S}{\\partial v_1\\partial v_2\\ldots\\partial       v_r}\\).  Leibniz product rule \\[\\left(u\\cdot v\\right)'=uv'+u'v\\] operates even () \\(u,v\\) commute.  example,   wish differentiate \\(aaba\\) respect \\(\\),   write \\(f() = aaba\\) $$f(+\\delta ) = (+\\delta )(+\\delta )b(+\\delta )$$ working first order $$f(+\\delta ) -f()= (\\delta )aba + (\\delta )ba + aab(\\delta   ).$$  package:  term freealg object can include negative values   correspond negative powers variables.  Thus:  (see also examples).  Vector r may include negative   integers mean differentiate respect inverse   variable:  possible perform repeated differentiation passing   suitable value r.    \\(\\frac{\\partial^2}{\\partial \\partial c}\\):  infinitesimal indeterminates (“da” etc)   represented SHRT_MAX+r, r integer   symbol, SHRT_MAX maximum short integer.    includes negative r.  maximum number symbol   SHRT_MAX.  Inverse elements , represented   negative integers, differentials SHRT_MAX-r. Function deriv() calls helper function lowlevel_diffn()   documented Ops.freealg.Rd. vignette illustrating concept furnishing numerical   verification code context matrix algebra given   inst/freealg_matrix.Rmd.","code":"> deriv(as.freealg(\"aaba\"),\"a\")     free algebra element algebraically equal to     + 1*aab(da) + 1*a(da)ba + 1*(da)aba > deriv(as.freealg(\"AAAA\"),\"a\")     free algebra element algebraically equal to     - 1*AAAA(da)A - 1*AAA(da)AA - 1*AA(da)AAA - 1*A(da)AAAA > deriv(as.freealg(\"3abcbCC\"),\"C\")     free algebra element algebraically equal to     + 3*abcbC(dC) + 3*abcb(dC)C - 3*abc(dC)cbCC > deriv(as.freealg(\"aaabAcx\"),\"ac\")     free algebra element algebraically equal to     - 1*aaabA(da)A(dc)x + 1*aa(da)bA(dc)x + 1*a(da)abA(dc)x + 1*(da)aabA(dc)x"},{"path":"https://robinhankin.github.io/freealg/reference/deriv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiation of freealg objects — deriv","text":"","code":"deriv(as.freealg(\"4*aaaabaacAc\"),1) #> free algebra element algebraically equal to #> - 4aaaabaacA(da)Ac + 4aaaaba(da)cAc + 4aaaab(da)acAc + 4aaa(da)baacAc + #> 4aa(da)abaacAc + 4a(da)aabaacAc + 4(da)aaabaacAc  x <- rfalg() deriv(x,1:3) #> free algebra element algebraically equal to #> 0  y <- rfalg(7,7,17,TRUE)  deriv(y,1:5)-deriv(y,sample(1:5)) # should be zero #> free algebra element algebraically equal to #> 0"},{"path":"https://robinhankin.github.io/freealg/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Class “dot” — dot-class","title":"Class “dot” — dot-class","text":"dot object defined .[x,y] returns commutator x y, , xy-yx Lie bracket \\([x,y]\\).  nice use [x,y] (, without dot) although syntactically consistent, done R. “meat” dot functionality : package code includes bits pieces informative error messages idiom .[].  package defines matrix method dot object.  “*” returns (incorrectly, view) elementwise product, matrix product. Jacobi identity, satisfied associative algebra, \\[   \\left[x,\\left[y,z\\right]\\right]+   \\left[y,\\left[z,x\\right]\\right]+   \\left[z,\\left[x,y\\right]\\right]=0 \\] left hand side returned jacobi(), zero (definition “zero”). Function ad() returns adjoint operator.  adjoint vignette provides details examples adjoint operator. dot object generated running script inst/dot.Rmd, includes discussion technical documentation, creates file dot.rda resides data/ directory.","code":"setClass(\"dot\", slots = c(ignore='numeric')) `.` <- new(\"dot\") setMethod(\"[\",signature(x=\"dot\",i=\"ANY\",j=\"ANY\"),function(x,i,j,drop){i*j-j*i})"},{"path":"https://robinhankin.github.io/freealg/reference/dot.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class “dot” — dot-class","text":"ignore: Object class \"numeric\", just       formal placeholder","code":""},{"path":"https://robinhankin.github.io/freealg/reference/dot.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class “dot” — dot-class","text":"[ signature(x = \"dot\", = \"\", j = \"\"): ... [ signature(x = \"dot\", = \"\", j = \"missing\"): ... [ signature(x = \"dot\", = \"function\", j = \"function\"): ... [ signature(x = \"dot\", = \"matrix\", j = \"matrix\"): ... [ signature(x = \"dot\", = \"missing\", j = \"\"): ... [ signature(x = \"dot\", = \"missing\", j = \"missing\"): ...","code":""},{"path":"https://robinhankin.github.io/freealg/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class “dot” — dot-class","text":"Always returns object class xy.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/dot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class “dot” — dot-class","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class “dot” — dot-class","text":"","code":".[as.freealg(\"x\"),as.freealg(\"y\")] #> free algebra element algebraically equal to #> + xy - yx .[as.freealg(\"x\"),as.freealg(\"y+2z\")] #> free algebra element algebraically equal to #> + xy + 2xz - yx - 2zx .[as.freealg(\"x+y+2xYx\"),as.freealg(\"x+y+2xYx\")] #> [1] 0   x <- rfalg() y <- rfalg() z <- rfalg()  jacobi(x,y,z) # Jacobi identity #> free algebra element algebraically equal to #> 0 .[x,.[y,z]] + .[y,.[z,x]] + .[z,.[x,y]]  # Jacobi, expanded #> free algebra element algebraically equal to #> 0   f <- ad(x) f(y) #> free algebra element algebraically equal to #> - 25aaabcc - 35aaac + 5aabba - 10aabcb - 15aabcc - 21aac - 15aacbcb + 10abaaa - #> 5abbaa - 5abbaabcc - 7abbaac - 6abbabc - 2abbabcb - 3abbacbcb + 17abc - 30abca #> - 30abcabcc - 42abcac - 6abcb - 36abcbc - 12abcbcb + 15abcca + 25abccaa + #> 5abccabba + 30abccabc + 10abccbaaa + 35abccbc - 18abccbcb + 20abccc + 20ac + #> 21aca + 35acaa + 7acabba + 42acabc + 14acbaaa + 49acbc - 9acbcb + 28acc - #> 10baaaa - 10baaaabcc - 14baaaac - 12baaabc - 4baaabcb - 6baaacbcb - 17bca + #> 30bcaa + 6bcabba + 36bcabc - 35bcabcc - 49bcac + 6bcba + 10bcbaa + 12bcbaaa + #> 2bcbabba + 12bcbabc + 4bcbbaaa + 14bcbbc + 8bcbc - 14bcbcb + 24bcc - 21bccbcb - #> 20ca - 20cabcc - 28cac - 24cbc - 8cbcb + 9cbcba + 15cbcbaa + 3cbcbabba + #> 18cbcbabc + 6cbcbbaaa + 21cbcbbc + 12cbcbc - 12ccbcb   rM <- function(...){matrix(sample(1:9,9),3,3)} # a random matrix  M <- rM() N <- rM() O <- rM()  .[M,N] #>      [,1] [,2] [,3] #> [1,]  -19  -24   22 #> [2,]   16  -15   26 #> [3,]    8  -15   34 jacobi(M,N,O) #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    0    0    0 #> [3,]    0    0    0  plot(.[sin,tan](seq(from=0,to=1,len=100)))"},{"path":"https://robinhankin.github.io/freealg/reference/drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop redundant information — drop","title":"Drop redundant information — drop","text":"Coerce constant free algebra objects numeric","code":""},{"path":"https://robinhankin.github.io/freealg/reference/drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop redundant information — drop","text":"","code":"drop(x)"},{"path":"https://robinhankin.github.io/freealg/reference/drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop redundant information — drop","text":"x Free algebra object","code":""},{"path":"https://robinhankin.github.io/freealg/reference/drop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop redundant information — drop","text":"argument constant freealg object, coerce   numeric.  Modelled base::drop().","code":""},{"path":"https://robinhankin.github.io/freealg/reference/drop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop redundant information — drop","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freealg/reference/drop.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Drop redundant information — drop","text":"functions package take drop argument   , TRUE, means function returns   dropped value.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/drop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop redundant information — drop","text":"","code":"drop(linear(1:5)) #> free algebra element algebraically equal to #> + a + 2b + 3c + 4d + 5e drop(4+linear(1:5)*0) #> [1] 4"},{"path":"https://robinhankin.github.io/freealg/reference/freealg-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class “freealg” — freealg-class","title":"Class “freealg” — freealg-class","text":"formal S4 class codefreealg objects","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class “freealg” — freealg-class","text":"Formal class freealg used functions drop()   need S4 object.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class “freealg” — freealg-class","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The Free Algebra — freealg-package","title":"The Free Algebra — freealg-package","text":"free algebra R non-commuting indeterminates.      Uses 'disordR' discipline      (Hankin, 2022, <doi:10.48550/ARXIV.2210.03856>).  cite      package publications please use Hankin (2022)      <doi:10.48550/ARXIV.2211.04002>.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Free Algebra — freealg-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Free Algebra — freealg-package","text":"Robin K. S. Hankin [aut, cre] (<https://orcid.org/0000-0001-5982-0415>) Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Free Algebra — freealg-package","text":"","code":"a <- as.freealg(\"x+xyx\") b <- as.freealg(\"4x +XyX\")  # upper-case interpreted as inverse  a+b #> free algebra element algebraically equal to #> + XyX + 5x + xyx stopifnot(a+b==b+a)   # should be TRUE  a*b ==b*a # FALSE; noncommutative algebra #> [1] FALSE  as.freealg(\"1+X+xy\")^3 #> free algebra element algebraically equal to #> + 1 + 3X + 3XX + XXX + Xy + 3xy + 3xyX + xyXX + 3xyxy + xyxyX + xyxyxy + xyy + #> 3y + yX + yxy  rfalg() #> free algebra element algebraically equal to #> + 7ab + 4abab + 6abb + 2b + ba + 3caab + 5ccca rfalg()^2 #> free algebra element algebraically equal to #> + 9aa + 3aac + 15ab + 6abc + 12abcba + 39ac + 3aca + acac + 5acb + 2acbc + #> 4acbcba + 13acc + 15ba + 5bac + 25bb + 10bbc + 20bbcba + 65bc + 6bca + 2bcac + #> 10bcb + 12bcbaa + 4bcbaac + 20bcbab + 8bcbabc + 16bcbabcba + 52bcbac + 4bcbc + #> 8bcbcba + 26bcc + 39ca + 13cac + 65cb + 26cbc + 52cbcba + 169cc"},{"path":"https://robinhankin.github.io/freealg/reference/freealg.html","id":null,"dir":"Reference","previous_headings":"","what":"The free algebra — freealg","title":"The free algebra — freealg","text":"Create, test , coerce , freealg objects","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The free algebra — freealg","text":"","code":"freealg(words, coeffs) is_ok_free(words,coeffs) is.freealg(x) as.freealg(x,...) char_to_freealg(ch) natural_char_to_freealg(string) string_to_freealg(string) vector_to_free(v,coeffs)"},{"path":"https://robinhankin.github.io/freealg/reference/freealg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The free algebra — freealg","text":"words Terms algebra object, eg c(1,2,-1,-3,-2)     corresponds abACB \\(=1\\), \\(b=2\\) etc;     uppercase, negative number, means inverse coeffs Numeric vector corresponding coefficients     element word list string Character string ch Character vector v Vector integers x Object possibly class freealg ... arguments, passed methods","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The free algebra — freealg","text":"Function freealg() formal creation mechanism freealg objects.  However, user-friendly; better use .freealg() day--day use (although use heuristics coefficients supplied). Low-level helper function is_ok_freealg() checks consistency arguments. freealg object two-element list.  first element list integer vectors representing indices second numeric vector coefficients.  Thus, example: Observe order terms preserved indeed undefined (implementation-specific).  Zero entries stripped . Character strings may coerced freealg objects; .freealg() calls natural_char_to_freealg(), user-friendly.  Functions char_to_freealg() string_to_freealg() low-level helper functions.  functions assume upper-case letters multiplicative inverses lower-case equivalents; example .freealg(\"aA\") .freealg(aBcCbA) evaluate one.  can confusing default print method.","code":"> as.freealg(\"a+4bd+3abbbbc\") free algebra element algebraically equal to  + 1*a + 3*abbbbc + 4*bd > dput(as.freealg(\"a+4bd+3abbbbc\")) structure(list(indices = list(1L, c(1L, 2L, 2L, 2L, 2L, 3L),     c(2L, 4L)), coeffs = c(1, 3, 4)), class = \"freealg\")"},{"path":"https://robinhankin.github.io/freealg/reference/freealg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The free algebra — freealg","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The free algebra — freealg","text":"Internally, package uses signed integers can   .Machine$integer.max different symbols; machine   2147483647.  course print method deal   26 symbols letters -z (-Z inverses),   objects care print method.  Note also   experimental calculus facility (per deriv())   reserves numbers range SHRT_MAX\\({}\\pm r\\)   infinitesimals, r integer symbol.    system might change future.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/freealg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The free algebra — freealg","text":"","code":"freealg(list(1:2, 2:1,numeric(0),1:6),1:4) #> free algebra element algebraically equal to #> + 3 + ab + 4abcdef + 2ba freealg(list(1:2, 2:1,numeric(0),1:6))   # heuristics for coeffs: assume 1 #> free algebra element algebraically equal to #> + 1 + ab + abcdef + ba  freealg(sapply(1:5,seq_len),1:5) #> free algebra element algebraically equal to #> + a + 2ab + 3abc + 4abcd + 5abcde  freealg(replicate(5,sample(-5:5,rgeom(1,1/5),replace=TRUE)),1:5) #> free algebra element algebraically equal to #> + 3 + 5a + bcDBAbAB + 4cB + 2eeca   as.freealg(\"1+xaX\")^5 #> free algebra element algebraically equal to #> + 1 + 5xaX + 10xaaX + 10xaaaX + 5xaaaaX + xaaaaaX"},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":null,"dir":"Reference","previous_headings":"","what":"The grade (or degree) of terms in a freealg object — grade","title":"The grade (or degree) of terms in a freealg object — grade","text":"free algebra \\(\\mathcal B\\) graded algebra: , integer \\(n\\geq 0\\) homogeneous subspace \\(\\mathcal{B}_n\\) \\(\\mathcal{B}_0=\\mathcal{R}\\) \\[   \\mathcal{B}=\\bigoplus_{n=0}^\\infty\\mathcal{B}_n,\\quad\\mbox{}\\quad\\mathcal{B}_n\\mathcal{B}_m\\subseteq\\mathcal{B}_{n+m}\\quad\\mbox{$m,n\\geq  0.$} \\] elements \\(\\cup_{n\\geq 0}\\mathcal{B}_n\\) called homogeneous \\(\\mathcal{B}_n\\) called homogenous degree (grade) \\(n\\). grade term number symbols .  Thus grade xxx 4xxy 3; grade constant zero.  terms stored implementation-specific way, grade multi-term object disord object. grade zero freealg object, grade(.freealg(0)), defined \\(-\\infty\\), per Knuth [TAOCP, volume 2, p436].  ensures max(grades(abelianize(x))) <= max(grades(x)) always satisfied. However, case NULL made.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The grade (or degree) of terms in a freealg object — grade","text":"","code":"grades(x) grade(x,n) grade(x, n) <- value deg(x)"},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The grade (or degree) of terms in a freealg object — grade","text":"x Freealg object n Integer vector value Replacement value, numeric vector","code":""},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The grade (or degree) of terms in a freealg object — grade","text":"grades(x) returns grade (number symbols) term   freealg object x. deg(x) returns maximum grades symbol   x; max(grades(x)). grade(x,n) returns freealg object comprising terms   grade n (may vector).  Note function   considerably less efficient clifford::grade(). grade(x,n) <- value sets coefficients terms grade   n.  value, length-one numeric vector accepted   (notably zero, kills terms grade n) also   freealg object comprising terms grade n.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The grade (or degree) of terms in a freealg object — grade","text":"Returns disord object","code":""},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The grade (or degree) of terms in a freealg object — grade","text":"H. Munthe-Kaas B. Owren 1999.  “Computations free Lie   algebra”, Phil. Trans. R. Soc. Lond. , 357:957–981 (theorem 3.8)","code":""},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The grade (or degree) of terms in a freealg object — grade","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The grade (or degree) of terms in a freealg object — grade","text":"similar concept grade discussed clifford package","code":""},{"path":"https://robinhankin.github.io/freealg/reference/grade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The grade (or degree) of terms in a freealg object — grade","text":"","code":"X <- as.freealg(\"1 -x + 5*y + 6*x*y -8*x*x*x*x*y*x\") X #> free algebra element algebraically equal to #> + 1 - x - 8xxxxyx + 6xy + 5y grades(X) #> A disord object with hash 55749095669cc08d7e66c42699d38acf64666dad and elements #> [1] 0 1 6 2 1 #> (in some order)  a <- rfalg(30) a #> free algebra element algebraically equal to #> + 7aaaa + 5abc + 10acaa + 102b + 30ba + 23bab + 27bb + 8bbbb + 2bc + 15bccb + #> 84c + 40ca + 3caac + caba + 20cacc + 26cbca + 39cc + 4ccab + 6ccbb + 13ccca grades(a) #> A disord object with hash e5d42ad70181cd4f4c778f7aa1fd4c9711633aa9 and elements #>  [1] 4 3 4 1 2 3 2 4 2 4 1 2 4 4 4 4 2 4 4 4 #> (in some order) grade(a,2) #> free algebra element algebraically equal to #> + 30ba + 27bb + 2bc + 40ca + 39cc grade(a,2) <- 0 # kill all grade-2 terms a #> free algebra element algebraically equal to #> + 7aaaa + 5abc + 10acaa + 102b + 23bab + 8bbbb + 15bccb + 84c + 3caac + caba + #> 20cacc + 26cbca + 4ccab + 6ccbb + 13ccca  grade(a,1) <- grade(a,1) * 888  a #> free algebra element algebraically equal to #> + 7aaaa + 5abc + 10acaa + 90576b + 23bab + 8bbbb + 15bccb + 74592c + 3caac + #> caba + 20cacc + 26cbca + 4ccab + 6ccbb + 13ccca"},{"path":"https://robinhankin.github.io/freealg/reference/horner.html","id":null,"dir":"Reference","previous_headings":"","what":"Horner's method — horner","title":"Horner's method — horner","text":"Horner's method multivariate polynomials","code":""},{"path":"https://robinhankin.github.io/freealg/reference/horner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horner's method — horner","text":"","code":"horner(P,v)"},{"path":"https://robinhankin.github.io/freealg/reference/horner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horner's method — horner","text":"P Free algebra polynomial v Numeric vector coefficients","code":""},{"path":"https://robinhankin.github.io/freealg/reference/horner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Horner's method — horner","text":"function (almost) mvp::horner(). Given polynomial \\[p(x) = a_0 +a_1x+a_2x^2+\\cdots + a_nx^n\\] possible express \\(p(x)\\) algebraically equivalent   form \\[p(x) = a_0 + x\\left(a_1+x\\left(a_2+\\cdots + x\\left(a_{n-1} +xa_n \\right)\\cdots\\right)\\right)\\] much efficient evaluation, requires \\(n\\) multiplications \\(n\\) additions, optimal. Function horner() take freealg object first argument.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/horner.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Horner's method — horner","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/horner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horner's method — horner","text":"","code":"horner(\"x\",  1:4)  # note constant term is 1. #> free algebra element algebraically equal to #> + 1 + 2x + 3xx + 4xxx  horner(\"x+y\",1:3) # note presence of xy and yx terms #> free algebra element algebraically equal to #> + 1 + 2x + 3xx + 3xy + 2y + 3yx + 3yy  horner(\"1+x+xyX\",1:3) #> free algebra element algebraically equal to #> + 6 + 8x + 3xx + 3xxyX + 3xy + 8xyX + 3xyyX"},{"path":"https://robinhankin.github.io/freealg/reference/inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverses — inverse","title":"Inverses — inverse","text":"Multiplicative inverses symbols free algebra","code":""},{"path":"https://robinhankin.github.io/freealg/reference/inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverses — inverse","text":"","code":"all_pos(x) keep_pos(x)"},{"path":"https://robinhankin.github.io/freealg/reference/inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverses — inverse","text":"x Freealg object","code":""},{"path":"https://robinhankin.github.io/freealg/reference/inverse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverses — inverse","text":"Function all_pos() tests argument positive   powers (, inverse symbols present); function   keep_pos() discards term negative power. various points package, assumed upper-case   letters multiplicative inverses lower-case equivalents;   example .freealg(\"aA\") .freealg(\"aBcCbA\")   evaluate one.  can confusing default print method. Even though individual symbols multiplicative inverses, general   element free algebra multiplicative inverse.   example, 1+x inverse.  free algebra   division algebra, general.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/inverse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inverses — inverse","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/inverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverses — inverse","text":"","code":"all_pos(rfalg(include.negative = TRUE)) #> [1] FALSE all_pos(rfalg(include.negative = FALSE)) #> [1] TRUE   as.freealg(\"1+xaX\")^5 #> free algebra element algebraically equal to #> + 1 + 5xaX + 10xaaX + 10xaaaX + 5xaaaaX + xaaaaaX"},{"path":"https://robinhankin.github.io/freealg/reference/letters.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-letter symbols — letters","title":"Single-letter symbols — letters","text":"Variables , b,..., z inverses   -Z given freealg semantic meaning.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/letters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single-letter symbols — letters","text":"Sometimes convenient R session 26 letters -z 26 uppercase letters -Z adopt free algebra interpretations.  access , load lettersymbols dataset, provided package inst directory: Executing allows cool things following: Lowercase letters c, q, t, uppercase letters C, D, F, , T might pose difficulties. objects can also generated running script inst/symb.Rmd, includes discussion technical documentation creates file lettersymbols.rda formerly resided data/ directory.","code":"load(system.file(\"lettersymbols.rda\",package=\"freealg\")) > (1+a-b^2)^4 free algebra element algebraically equal to + 1 + 4a + 6aa + 4aaa + aaaa - aaabb - 4aabb - aabba + aabbbb - 6abb - 4abba - abbaa + abbabb + 4abbbb + abbbba - abbbbbb - 4bb - 6bba - 4bbaa - bbaaa + bbaabb + 4bbabb + bbabba - bbabbbb + 6bbbb + 4bbbba + bbbbaa - bbbbabb - 4bbbbbb - bbbbbba + bbbbbbbb >"},{"path":"https://robinhankin.github.io/freealg/reference/letters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single-letter symbols — letters","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/linear.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple free algebra object — linear","title":"A simple free algebra object — linear","text":"Create simple free algebra objects including linear expressions.    example:","code":"> linear(1:3) free algebra element algebraically equal to + 1*a + 2*b + 3*c > linear(1:3,power=5) free algebra element algebraically equal to + 1*aaaaa + 2*bbbbb + 3*ccccc >"},{"path":"https://robinhankin.github.io/freealg/reference/linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple free algebra object — linear","text":"","code":"linear(x,power=1)"},{"path":"https://robinhankin.github.io/freealg/reference/linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple free algebra object — linear","text":"x Numeric vector terms power Integer vector powers","code":""},{"path":"https://robinhankin.github.io/freealg/reference/linear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A simple free algebra object — linear","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/linear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A simple free algebra object — linear","text":"instructive compare functionality documented   mvp equivalents.  Many functions documented   mvp::special.Rd make sense context free   algebra.  Function mvp::product(), example, imposes   order expansion. Function constant() documented constant.Rd, listed convenience.","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freealg/reference/linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A simple free algebra object — linear","text":"","code":"linear(1:3)          #> free algebra element algebraically equal to #> + a + 2b + 3c linear(1:3,power=5) #> free algebra element algebraically equal to #> + aaaaa + 2bbbbb + 3ccccc linear(1:3,power=3:1) #> free algebra element algebraically equal to #> + aaa + 2bb + 3c"},{"path":"https://robinhankin.github.io/freealg/reference/nterms.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of terms in a freealg object — nterms","title":"Number of terms in a freealg object — nterms","text":"Number terms freealg object; number coefficients","code":""},{"path":"https://robinhankin.github.io/freealg/reference/nterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of terms in a freealg object — nterms","text":"","code":"nterms(x)"},{"path":"https://robinhankin.github.io/freealg/reference/nterms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of terms in a freealg object — nterms","text":"x Freealg object","code":""},{"path":"https://robinhankin.github.io/freealg/reference/nterms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of terms in a freealg object — nterms","text":"Returns non-negative integer","code":""},{"path":"https://robinhankin.github.io/freealg/reference/nterms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of terms in a freealg object — nterms","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/nterms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of terms in a freealg object — nterms","text":"","code":"(a <- freealg(list(1:3,4:7,1:10),1:3)) #> free algebra element algebraically equal to #> + abc + 3abcdefghij + 2defg nterms(a) #> [1] 3 nterms(a+1) #> [1] 4 nterms(a*0) #> [1] 0"},{"path":"https://robinhankin.github.io/freealg/reference/pepper.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine variables in every possible order — pepper","title":"Combine variables in every possible order — pepper","text":"Given list variables, construct every term comprising   variables; function pepper() returns free algebra object   equal sum terms. function named query exam question set Sarah   Marshall asked many ways arrange   letters word “pepper”, answer \\(\\left({6\\atop   1\\,2\\,3}\\right)=\\frac{6!}{1!2!3!}=60\\). Function multiset() partitions package gives   related functionality; record, one way reproduce   pepper(\"pepper\") ","code":"apply(matrix(c(\"p\",\"e\",\"r\")[multiset(c(1,1,1,2,2,3))],nrow=6),2,paste,collapse=\"\")"},{"path":"https://robinhankin.github.io/freealg/reference/pepper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine variables in every possible order — pepper","text":"","code":"pepper(v)"},{"path":"https://robinhankin.github.io/freealg/reference/pepper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine variables in every possible order — pepper","text":"v Variables combine.  character string, coerce     variable numbers","code":""},{"path":"https://robinhankin.github.io/freealg/reference/pepper.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine variables in every possible order — pepper","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freealg/reference/pepper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine variables in every possible order — pepper","text":"","code":"pepper(c(1,1,1,1,1,1,2))  # 6 a's and 1 b #> free algebra element algebraically equal to #> + aaaaaab + aaaaaba + aaaabaa + aaabaaa + aabaaaa + abaaaaa + baaaaaa pepper(c(1,2,2,2,3))      # 1 a, 3 b's and 1 c #> free algebra element algebraically equal to #> + abbbc + abbcb + abcbb + acbbb + babbc + babcb + bacbb + bbabc + bbacb + bbbac #> + bbbca + bbcab + bbcba + bcabb + bcbab + bcbba + cabbb + cbabb + cbbab + cbbba pepper(\"pepper\") #> free algebra element algebraically equal to #> + eepppr + eepprp + eeprpp + eerppp + epeppr + epeprp + eperpp + eppepr + #> epperp + eppper + epppre + epprep + epprpe + eprepp + eprpep + eprppe + ereppp #> + erpepp + erppep + erpppe + peeppr + peeprp + peerpp + pepepr + peperp + #> pepper + peppre + peprep + peprpe + perepp + perpep + perppe + ppeepr + ppeerp #> + ppeper + ppepre + pperep + pperpe + pppeer + pppere + pppree + ppreep + #> pprepe + pprpee + preepp + prepep + preppe + prpeep + prpepe + prppee + reeppp #> + repepp + reppep + repppe + rpeepp + rpepep + rpeppe + rppeep + rppepe + #> rpppee"},{"path":"https://robinhankin.github.io/freealg/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print freealg objects — print","title":"Print freealg objects — print","text":"Print methods free algebra objects.  indeterminates represented using lowercase letters -z (currently hard coded).","code":""},{"path":"https://robinhankin.github.io/freealg/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print freealg objects — print","text":"","code":"# S3 method for class 'freealg' print(x,...)"},{"path":"https://robinhankin.github.io/freealg/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print freealg objects — print","text":"x Object class freealg print method ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/freealg/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print freealg objects — print","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/print.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Print freealg objects — print","text":"print method change internal representation freealg object, two-element list, first list integer vectors representing words, second numeric vector coefficients. print method uses lowercase letters -z represent indeterminates; currently hard coded: print method special dispensation length-zero freealg objects handled entirely consistently. print method sensitive value getOption(\"usecaret\"), defaulting “FALSE”.  default use uppercase letters represent multiplicative inverses.  Thus, inverse appears either “^-1” usecaret TRUE, “” FALSE. Carets become cumbersome powers first.  example, default notation \\(aba^{-2}\\) abAA becomes aba^-1a^-1 usecaret TRUE. symbols indeterminates currently hardcoded c(letters,LETTERS).  intent able signify 52 distinct indeterminates, -z,-Z.  works fine option usecaret TRUE.  option usecaret FALSE, can confusing: example, indeterminate number 1 appears , inverse appear “”. indeterminate number 27 also appears “”.  look , warning given: caveat emptor! method also sensitive getOption(\"mulsym\"), defaulting NULL.  multiplication symbol used coefficient indeterminate string.  Sometimes asterisk, * space, might useful.  mulsym takes default NULL [length zero string], print method suppresses coefficients \\(\\pm 1\\). Integers exceeding SHRT_MAX reserved infinitesimals, printed “da”; see note deriv.Rd details.","code":"> (x <- as.freealg(\"6abbbc + 7cax\")) free algebra element algebraically equal to + 6*abbbc + 7*cax > unclass(x) $indices $indices[[1]] [1] 1 2 2 2 3  $indices[[2]] [1]  3  1 24   $coeffs [1] 6 7"},{"path":[]},{"path":"https://robinhankin.github.io/freealg/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print freealg objects — print","text":"","code":"rfalg() #> free algebra element algebraically equal to #> + 13aaca + 3abbb + 5acc + 2baa + caaa + 4cb  x <- rfalg(inc=TRUE) x                           # default #> free algebra element algebraically equal to #> + 3CC + 7BccB + AA + 5AbA + 4a + 2bba + 6bc options(\"usecaret\" = TRUE)  # use caret x #> free algebra element algebraically equal to #> + 3c^-1c^-1 + 7b^-1ccb^-1 + a^-1a^-1 + 5a^-1ba^-1 + 4a + 2bba + 6bc options(\"usecaret\" = FALSE) # back to the default x #> free algebra element algebraically equal to #> + 3CC + 7BccB + AA + 5AbA + 4a + 2bba + 6bc   x <- freealg(list(5,1:4,3,8,7),c(1,1,1,3,22)) x #> free algebra element algebraically equal to #> + abcd + c + e + 22g + 3h   options(mulsym = \"*\") x #> free algebra element algebraically equal to #> + 1*abcd + 1*c + 1*e + 22*g + 3*h options(mulsym = NULL)  # restore default"},{"path":"https://robinhankin.github.io/freealg/reference/rfalg.html","id":null,"dir":"Reference","previous_headings":"","what":"Random free algebra objects — rfalg","title":"Random free algebra objects — rfalg","text":"Random elements free algebra, intended quick   “get going” examples freealg objects","code":""},{"path":"https://robinhankin.github.io/freealg/reference/rfalg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random free algebra objects — rfalg","text":"","code":"rfalg(n=7, distinct=3, maxsize=4, include.negative=FALSE) rfalgg(n=30, distinct=8, maxsize=7, include.negative=FALSE) rfalggg(n=100, distinct=26, maxsize=30, include.negative=FALSE)"},{"path":"https://robinhankin.github.io/freealg/reference/rfalg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random free algebra objects — rfalg","text":"n Number terms generate distinct Number distinct symbols use maxsize Maximum number symbols word include.negative Boolean, default FALSE meaning     use positive symbols (lower-case letters) TRUE     meaning use upper-case letters well, corresponding     inverse lower-case symbols","code":""},{"path":"https://robinhankin.github.io/freealg/reference/rfalg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random free algebra objects — rfalg","text":"see get, basically.  term aaBaAbaC simplified aaaC. Functions rfalgg() rfalggg() return successively complicated freealg objects.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/rfalg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random free algebra objects — rfalg","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/rfalg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random free algebra objects — rfalg","text":"","code":"rfalg() #> free algebra element algebraically equal to #> + 9a + 11ba + 4bbaa + 4cb rfalg(include.negative=TRUE)^2 #> free algebra element algebraically equal to #> + 16CBCB + 24CBCAAA + 28CBBCbC + 4CBBB + 8CBBaaB + 20CBA + 12CBAcAB + 24CAAACB #> + 36CAAACAAA + 42CAAABCbC + 6CAAABB + 12CAAABaaB + 30CAAAA + 18CAAAAcAB + #> 28BCbCCB + 42BCbCCAAA + 49BCbCBCbC + 7BCbCBB + 14BCbCBaaB + 35BCbCA + #> 21BCbCAcAB + 4BBCB + 6BBCAAA + 7BBBCbC + BBBB + 2BBBaaB + 5BBA + 3BBAcAB + #> 8BaaBCB + 12BaaBCAAA + 14BaaBBCbC + 2BaaBBB + 4BaaBBaaB + 10BaaBA + 6BaaBAcAB + #> 20ACB + 30ACAAA + 35ABCbC + 5ABB + 10ABaaB + 25AA + 15AAcAB + 12AcABCB + #> 18AcABCAAA + 21AcABBCbC + 3AcABBB + 6AcABBaaB + 15AcABA + 9AcABAcAB   constant(rfalg()) #> [1] 0"},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitution — subs","title":"Substitution — subs","text":"Substitute symbols freealg object numbers   freealg objects","code":""},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitution — subs","text":"","code":"subs(S, ...) subsu(S1,S2,r)"},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitution — subs","text":"S,S1,S2 Objects class freealg r Integer specifying symbol substitute (\\(=1,b=2\\) etc) ... named arguments corresponding variables substitute","code":""},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitution — subs","text":"Returns freealg object.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Substitution — subs","text":"Function subs() substitutes variables freealg objects (coerced necessary) using natural R idiom.  Observe type substitution sensitive order: Functions subsu() lower-level formal function, really intended end-user.  Function subsu() takes S1 substitutes occurrences symbol r S2. equivalent mvp::subvec() currently implemented.","code":"> subs(\"ax\",a=\"1+x\",x=\"1+a\") free algebra element algebraically equal to  + 2 + 3*a + 1*aa  > subs(\"ax\",x=\"1+a\",a=\"1+x\") free algebra element algebraically equal to  + 2 + 3*x + 1*xx"},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Substitution — subs","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Substitution — subs","text":"Function subs() one place package use   letters effectively hard-wired .  Idiom subs(\"abccc\",b=\"1+3x\") nice, identifies “b” 2.  Note argument   r subsu() canonically integer single   character interpreted letter.  See also note   freealg.Rd.","code":""},{"path":"https://robinhankin.github.io/freealg/reference/subs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitution — subs","text":"","code":"subs(\"abccc\",b=\"1+3x\") #> free algebra element algebraically equal to #> + accc + 3axccc subs(\"aaaa\",a=\"1+x\")  # binomial #> free algebra element algebraically equal to #> + 1 + 4x + 6xx + 4xxx + xxxx  subs(\"abA\",b=31) #> free algebra element algebraically equal to #> + 31  subs(\"1+a\",a=\"A\")   # can substitute for an inverse #> free algebra element algebraically equal to #> + 1 + A subs(\"A\",a=\"1+x\")   # inverses are not substituted for #> free algebra element algebraically equal to #> + A   ## Sequential substitution works:  subs(\"abccc\",b=\"1+3x\",x=\"1+d+2e\") #> free algebra element algebraically equal to #> + 4accc + 3adccc + 6aeccc subs(rfalg(),a=rfalg()) #> free algebra element algebraically equal to #> + 1512aaa + 1764aabc + 756aaca + 1008aacaba + 252aacabb + 1764aaccb + 1764abca #> + 2058abcbc + 882abcca + 1176abccaba + 294abccabb + 2058abcccb + 6ac + 1188acaa #> + 1008acabaa + 1176acababc + 504acabaca + 672acabacaba + 168acabacabb + #> 1176acabaccb + 252acabba + 294acabbbc + 126acabbca + 168acabbcaba + 42acabbcabb #> + 294acabbccb + 1386acabc + 594acaca + 792acacaba + 198acacabb + 1386acaccb + #> 504acbca + 588acbcbc + 252acbcca + 336acbccaba + 84acbccabb + 588acbcccb + #> 216accaa + 288accabaa + 336accababc + 144accabaca + 192accabacaba + #> 48accabacabb + 336accabaccb + 72accabba + 84accabbbc + 36accabbca + #> 48accabbcaba + 12accabbcabb + 84accabbccb + 252accabc + 108accaca + 144accacaba #> + 36accacabb + 252accaccb + 1764accba + 2058accbbc + 882accbca + 1176accbcaba + #> 294accbcabb + 2058accbccb + 504acccba + 588acccbbc + 252acccbca + 336acccbcaba #> + 84acccbcabb + 588acccbccb + 8b + 1764bcaa + 2058bcabc + 882bcaca + #> 1176bcacaba + 294bcacabb + 2058bcaccb + 2058bcbca + 2401bcbcbc + 1029bcbcca + #> 1372bcbccaba + 343bcbccabb + 2401bcbcccb + 7bcc + 1386bccaa + 1176bccabaa + #> 1372bccababc + 588bccabaca + 784bccabacaba + 196bccabacabb + 1372bccabaccb + #> 294bccabba + 343bccabbbc + 147bccabbca + 196bccabbcaba + 49bccabbcabb + #> 343bccabbccb + 1617bccabc + 693bccaca + 924bccacaba + 231bccacabb + 1617bccaccb #> + 588bccbca + 686bccbcbc + 294bccbcca + 392bccbccaba + 98bccbccabb + #> 686bccbcccb + 252bcccaa + 336bcccabaa + 392bcccababc + 168bcccabaca + #> 224bcccabacaba + 56bcccabacabb + 392bcccabaccb + 84bcccabba + 98bcccabbbc + #> 42bcccabbca + 56bcccabbcaba + 14bcccabbcabb + 98bcccabbccb + 294bcccabc + #> 126bcccaca + 168bcccacaba + 42bcccacabb + 294bcccaccb + 2058bcccba + #> 2401bcccbbc + 1029bcccbca + 1372bcccbcaba + 343bcccbcabb + 2401bcccbccb + #> 588bccccba + 686bccccbbc + 294bccccbca + 392bccccbcaba + 98bccccbcabb + #> 686bccccbccb + 4c + 756caaa + 882caabc + 378caaca + 504caacaba + 126caacabb + #> 882caaccb + 1008cabaaa + 1176cabaabc + 504cabaaca + 672cabaacaba + 168cabaacabb #> + 1176cabaaccb + 1176cababca + 1372cababcbc + 588cababcca + 784cababccaba + #> 196cababccabb + 1372cababcccb + 4cabac + 792cabacaa + 672cabacabaa + #> 784cabacababc + 336cabacabaca + 448cabacabacaba + 112cabacabacabb + #> 784cabacabaccb + 168cabacabba + 196cabacabbbc + 84cabacabbca + 112cabacabbcaba #> + 28cabacabbcabb + 196cabacabbccb + 924cabacabc + 396cabacaca + 528cabacacaba + #> 132cabacacabb + 924cabacaccb + 336cabacbca + 392cabacbcbc + 168cabacbcca + #> 224cabacbccaba + 56cabacbccabb + 392cabacbcccb + 144cabaccaa + 192cabaccabaa + #> 224cabaccababc + 96cabaccabaca + 128cabaccabacaba + 32cabaccabacabb + #> 224cabaccabaccb + 48cabaccabba + 56cabaccabbbc + 24cabaccabbca + #> 32cabaccabbcaba + 8cabaccabbcabb + 56cabaccabbccb + 168cabaccabc + 72cabaccaca #> + 96cabaccacaba + 24cabaccacabb + 168cabaccaccb + 1176cabaccba + 1372cabaccbbc #> + 588cabaccbca + 784cabaccbcaba + 196cabaccbcabb + 1372cabaccbccb + #> 336cabacccba + 392cabacccbbc + 168cabacccbca + 224cabacccbcaba + 56cabacccbcabb #> + 392cabacccbccb + 252cabbaa + 294cabbabc + 126cabbaca + 168cabbacaba + #> 42cabbacabb + 294cabbaccb + 294cabbbca + 343cabbbcbc + 147cabbbcca + #> 196cabbbccaba + 49cabbbccabb + 343cabbbcccb + cabbc + 198cabbcaa + 168cabbcabaa #> + 196cabbcababc + 84cabbcabaca + 112cabbcabacaba + 28cabbcabacabb + #> 196cabbcabaccb + 42cabbcabba + 49cabbcabbbc + 21cabbcabbca + 28cabbcabbcaba + #> 7cabbcabbcabb + 49cabbcabbccb + 231cabbcabc + 99cabbcaca + 132cabbcacaba + #> 33cabbcacabb + 231cabbcaccb + 84cabbcbca + 98cabbcbcbc + 42cabbcbcca + #> 56cabbcbccaba + 14cabbcbccabb + 98cabbcbcccb + 36cabbccaa + 48cabbccabaa + #> 56cabbccababc + 24cabbccabaca + 32cabbccabacaba + 8cabbccabacabb + #> 56cabbccabaccb + 12cabbccabba + 14cabbccabbbc + 6cabbccabbca + 8cabbccabbcaba + #> 2cabbccabbcabb + 14cabbccabbccb + 42cabbccabc + 18cabbccaca + 24cabbccacaba + #> 6cabbccacabb + 42cabbccaccb + 294cabbccba + 343cabbccbbc + 147cabbccbca + #> 196cabbccbcaba + 49cabbccbcabb + 343cabbccbccb + 84cabbcccba + 98cabbcccbbc + #> 42cabbcccbca + 56cabbcccbcaba + 14cabbcccbcabb + 98cabbcccbccb + 882cabca + #> 1029cabcbc + 441cabcca + 588cabccaba + 147cabccabb + 1029cabcccb + 3cac + #> 594cacaa + 504cacabaa + 588cacababc + 252cacabaca + 336cacabacaba + #> 84cacabacabb + 588cacabaccb + 126cacabba + 147cacabbbc + 63cacabbca + #> 84cacabbcaba + 21cacabbcabb + 147cacabbccb + 693cacabc + 297cacaca + #> 396cacacaba + 99cacacabb + 693cacaccb + 252cacbca + 294cacbcbc + 126cacbcca + #> 168cacbccaba + 42cacbccabb + 294cacbcccb + 108caccaa + 144caccabaa + #> 168caccababc + 72caccabaca + 96caccabacaba + 24caccabacabb + 168caccabaccb + #> 36caccabba + 42caccabbbc + 18caccabbca + 24caccabbcaba + 6caccabbcabb + #> 42caccabbccb + 126caccabc + 54caccaca + 72caccacaba + 18caccacabb + 126caccaccb #> + 882caccba + 1029caccbbc + 441caccbca + 588caccbcaba + 147caccbcabb + #> 1029caccbccb + 252cacccba + 294cacccbbc + 126cacccbca + 168cacccbcaba + #> 42cacccbcabb + 294cacccbccb + 6cbb + 1764ccbaa + 2058ccbabc + 882ccbaca + #> 1176ccbacaba + 294ccbacabb + 2058ccbaccb + 2058ccbbca + 2401ccbbcbc + #> 1029ccbbcca + 1372ccbbccaba + 343ccbbccabb + 2401ccbbcccb + 7ccbc + 1386ccbcaa #> + 1176ccbcabaa + 1372ccbcababc + 588ccbcabaca + 784ccbcabacaba + 196ccbcabacabb #> + 1372ccbcabaccb + 294ccbcabba + 343ccbcabbbc + 147ccbcabbca + 196ccbcabbcaba + #> 49ccbcabbcabb + 343ccbcabbccb + 1617ccbcabc + 693ccbcaca + 924ccbcacaba + #> 231ccbcacabb + 1617ccbcaccb + 588ccbcbca + 686ccbcbcbc + 294ccbcbcca + #> 392ccbcbccaba + 98ccbcbccabb + 686ccbcbcccb + 252ccbccaa + 336ccbccabaa + #> 392ccbccababc + 168ccbccabaca + 224ccbccabacaba + 56ccbccabacabb + #> 392ccbccabaccb + 84ccbccabba + 98ccbccabbbc + 42ccbccabbca + 56ccbccabbcaba + #> 14ccbccabbcabb + 98ccbccabbccb + 294ccbccabc + 126ccbccaca + 168ccbccacaba + #> 42ccbccacabb + 294ccbccaccb + 2058ccbccba + 2401ccbccbbc + 1029ccbccbca + #> 1372ccbccbcaba + 343ccbccbcabb + 2401ccbccbccb + 588ccbcccba + 686ccbcccbbc + #> 294ccbcccbca + 392ccbcccbcaba + 98ccbcccbcabb + 686ccbcccbccb"},{"path":"https://robinhankin.github.io/freealg/reference/zero.html","id":null,"dir":"Reference","previous_headings":"","what":"The zero algebraic object — zero","title":"The zero algebraic object — zero","text":"Test freealg object's zero","code":""},{"path":"https://robinhankin.github.io/freealg/reference/zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The zero algebraic object — zero","text":"","code":"is.zero(x)"},{"path":"https://robinhankin.github.io/freealg/reference/zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The zero algebraic object — zero","text":"x Object class freealg","code":""},{"path":"https://robinhankin.github.io/freealg/reference/zero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The zero algebraic object — zero","text":"Function .zero() returns TRUE x indeed   zero free algebra object.  defined   length(coeffs(x))==0 reasons efficiency,   conceptually returns x==constant(0). (Use constant(0) create zero object).","code":""},{"path":"https://robinhankin.github.io/freealg/reference/zero.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The zero algebraic object — zero","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/freealg/reference/zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The zero algebraic object — zero","text":"","code":"stopifnot(is.zero(constant(0)))"}]
